# -*- coding: utf-8 -*-
"""Movie-Recommendation-System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qfKe52VaiFJghUhV9GBkznQ_aumNnNl3
"""

import pandas as pd
import numpy as np

movies=pd.read_csv('movie.csv')
movies.head(3)

movies['tags']=movies['genre']+ movies['overview']
movies.head(3)

new_df=movies[['id','title','genre','overview','tags']]
new_df=new_df.drop(columns=['genre','overview'])
new_df.head(7)

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=10000,stop_words='english')

vec=cv.fit_transform(new_df['tags'].values.astype('U')).toarray()
vec

vec.shape

from sklearn.metrics.pairwise import cosine_similarity
sim=cosine_similarity(vec)
sim

new_df[new_df['title']=='The Shawshank Redemption']

dist=sorted(list(enumerate(sim[0])),reverse=True, key=lambda vec:vec[1])
dist

for i in dist[0:5]:
  print(new_df.iloc[i[0]].title)

def recommend(movies):
  index=new_df[new_df['title']==movies].index[0]
  if(index)
  dist=sorted(list(enumerate(sim[index])),reverse=True, key=lambda vec:vec[1])
  for i in dist[0:5]:
      print(new_df.iloc[i[0]].title)

recommend('Iron Man')

recommend('Dilwale Dulhania Le Jayenge')

recommend('Avatar')

def calculate_precision(recommendations, actual_movies):
    relevant_recommendations = set(recommendations).intersection(set(actual_movies))
    precision = len(relevant_recommendations) / len(recommendations)
    return precision * 100  # Convert to percentage
actual_movies=['The Shawshank Redemption','Anything for Her','The Woodsman','The Getaway','Pusher II']
recommended_movies = [new_df.iloc[i[0]].title for i in dist[0:5]]

precision = calculate_precision(recommended_movies, actual_movies)
print(f"Precision: {precision:.2f}%")